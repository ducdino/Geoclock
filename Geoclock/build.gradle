apply plugin: 'com.android.application'
apply plugin: 'retrolambda'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
        applicationId "maurizi.geoclock"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

apply plugin: 'android-unit-test'

dependencies {
    // Robolectric must come before the support libraries in order for it to work
    testCompile 'org.robolectric:robolectric:2.3'
    testCompile 'junit:junit:4.10'
    testCompile 'com.squareup.assertj:assertj-android:1.0.0'
    testCompile 'com.squareup.assertj:assertj-android-support-v4:1.0.0'
    testCompile 'com.squareup.assertj:assertj-android-appcompat-v7:1.0.0'
    testCompile 'com.squareup.assertj:assertj-android-play-services:1.0.0'
    testCompile 'org.mockito:mockito-core:1.9.0'

    compile 'com.android.support:support-v4:20.0.0'
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.google.android.gms:play-services:4.4.52'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.google.guava:guava:17.0'
    compile 'org.projectlombok:lombok:1.12.6'
    compile 'org.threeten:threetenbp:1.0'
    compile 'com.jakewharton:butterknife:5.1.2'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
    'src/main/java'
]

// This differs per what flavors buildTypes etc.
// But this example shows the 'testDebug'
// which is standard for Robolectric
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')

    renamedFilesMap = [:]

    // Hacky fix for issue: https://code.google.com/p/android/issues/detail?id=69174.
    // Rename files with '$$' before generating report, and then rename back after
    doFirst {
        new File('Geoclock/build/intermediates/classes/debug').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                oldPath = file.path
                newPath = oldPath.replace('$$', '$')
                file.renameTo(newPath)
                renamedFilesMap[newPath] = oldPath
            }
        }
    }
    doLast {
        renamedFilesMap.each() {
            newPath, oldPath ->
                new File(newPath).renameTo(oldPath)
        }

        // Move report into location where coveralls is looking for it
        new File('Geoclock/build/reports/jacoco/jacocoTestReport').renameTo('Geoclock/build/reports/jacoco/test')
    }
}
